/********************************************************************************************************************************\
 * Purpose: To convert an in-fix expression to a post-fix expression
 * Algorithm: Take an expression and remove any whitespace. Create an empty stack for operators. Iterate over the expression,
 * the expression values will be considered to be char values, and push any operators on the stack. If it is a beginning
 * parenthesis, push it on to the stack. If it is a ending parenthesis pop the stack until a beginning parenthesis is found.
 * Establish a hierarchy for the operators. If any operators remain on the stack at the end add them to the end of the stack.
 ********************************************************************************************************************************/
package parser;
import java.util.Stack;
import java.util.HashMap;

public class InfixParser
{
	private Stack<Character> opStack = new Stack<Character>();
	private HashMap<Character, Integer> hierarchy = new HashMap<Character, Integer>();
	private String infix, postFix;
	/**Constructor
	 */
	public InfixParser()
	{
		
	}
	/**Constructor
	 * @param expression
	 */
	public InfixParser(String expression)
	{
		this.infix = removeWhiteSpace(expression);
	}
	/**Implements rearrangeExpression()
	 */
	public String parse()
	{
		return parse(infix);
	}
	/**Iteratively sorts the list from in-fix to post-fix
	 * @param list
	 * @return
	 */
	//not finished
	public String parse(String infix)
	{
		setHierarchy();
		postFix = "";
		for(int i=0; i<infix.length(); i++)
		{
			char inst = infix.charAt(i);
			if(Character.isDigit(inst))
				postFix += inst;
			else if(inst=='(')
				opStack.push(inst);
			else if(inst==')')
			{
				while(!opStack.empty()&&opStack.peek()!='(')
					postFix += opStack.pop();
				opStack.pop();
			}
			else
			{
				while(!opStack.empty()&&hierarchy.get(opStack.peek())>=hierarchy.get(inst))
					postFix += opStack.pop();
				opStack.push(inst);
			}
		}
		while(!opStack.empty())
			postFix += opStack.pop();
		return postFix;
	}
	/**Establishes a hierarchy based on the type of operator
	 * the greater the precedence of the operator the higher the number returned
	 * @param i
	 * @param list
	 * @return
	 */
	private void setHierarchy()
	{
		hierarchy.put('(', -1);
		hierarchy.put(')', -1);
		hierarchy.put('+', 1);
		hierarchy.put('-', 1);
		hierarchy.put('*', 2);
		hierarchy.put('/', 2);
	}
	/**Removes any white space from an expression
	 * @param expression
	 * @return
	 */
	public String removeWhiteSpace(String expression)
	{
		return expression.replaceAll("\\s", "");
	}
	/**Sets the mathematical expression
	 * @param expression
	 */
	public void setExpression(String expression)
	{
		this.infix = expression;
	}
	/**Returns the mathematical expression
	 * @return
	 */
	public String getExpression()
	{
		return infix;
	}
	/**Returns the hierarchy for the operators
	 * @return
	 */
	public HashMap<Character, Integer> getHierarchy()
	{
		return hierarchy;
	}
}
