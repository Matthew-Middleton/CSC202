/**Purpose: To convert an in-fix expression to a post-fix expression
 * Algorithm: Take an expression and remove any whitespace. Then, juxtapose the position of the numbers and the operators so that
 * changes from number operator number to reading as number number operator. Treat any other operator using the PEMDAS standard.
 *"Separate" the linked list by groups of three and switch the second and third positions
 */
package parser;
import java.util.LinkedList;
import java.util.regex.Pattern;
import java.util.Scanner;
public class InfixParser
{
	private LinkedList<String> list = new LinkedList<String>();
	@SuppressWarnings("unused")
	private Pattern operator = Pattern.compile("[\\+.\\-.\\*.\\/.]");
	@SuppressWarnings("unused")
	private Pattern number = Pattern.compile("[0-9]");
	private String expression = null;
	@SuppressWarnings("unused")
	private Scanner scan = null;
	
	public InfixParser()
	{
		
	}
	
	public InfixParser(String expression)
	{
		this.expression = removeWhiteSpace(expression);
		
	}
	/**Implements rearrangeExpression()
	 */
	public LinkedList<String> parse()
	{
		list = createList(expression);
		return parse(0, list);
	}
	/**Recursively sorts the list from in-fix to post-fix
	 * @param i
	 * @return
	 */
	//add condition for more than one operation and parenthetical operators as well
	public LinkedList<String> parse(int i, LinkedList<String> list)
	{
		String op = "";
		if(i>=list.size())
			return list;
		else
		{
			op = list.get(i+1);
			list.remove(op);
			list.add(i+2, op);
			return parse(i+3, list);
		}
	}
	/**Removes any white space from an expression
	 */
	private String removeWhiteSpace(String expression)
	{
		return expression.replaceAll("\\s", "");
	}
	/**Creates a linked list from a mathematical expression
	 * @param expression
	 * @return
	 */
	public LinkedList<String> createList(String expression)
	{
		for(int i=0; i<expression.length(); i++)
			list.add(expression.substring(i, i+1));
		return list;
	}
	/**Sets the expression and removes the whitespace from it
	 * @param expression
	 */
	public void setExpression(String expression)
	{
		this.expression = expression;
	}
	/**Returns the mathematical expression
	 */
	public String getString()
	{
		return expression;
	}
}
