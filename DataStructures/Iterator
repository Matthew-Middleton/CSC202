package dataStructures;

public class Iterator<T>
{
	protected Iterator<T> front, rear, location, previous, next, point;
	protected T element;
	protected int numElements = 0;
	protected boolean found;
	protected int targetIndex;
	
	public Iterator()
	{
		numElements = 0;
		front = null;
		rear = null;
	}
	
	public Iterator(T element)
	{
		numElements = 0;
		front = null;
		rear = null;
		this.element = element;
	}
	/**Passes over the list until the desired element is reached
	 * @param index
	 * @param newElement
	 * @return
	 */
	public T set(int index, T newElement)
	{
		if(index<0||index>=rear.numElements)
			return null;
		Iterator<T> node = front;
		for(int i=0; i<index; i++)
			node = node.location;
		T hold = node.element;
		node.element = newElement;
		return hold;
	}
	
	public void add(int index, T element)
	{
		if(index<0||index>rear.numElements)
			return;
		Iterator<T> newNode = new Iterator<T>(element);
		if(index==0)
		{
			if(front==null)
			{
				this.front = newNode;
				rear = newNode;
			}
			else
			{
				this.point = front;
				front = newNode;
			}
		}
		else
			if(index==size)
			{
				this.rear = newNode;
				rear = newNode;
			}
			else
			{
				Iterator<T> node = front;
				for(int i=0; i<index-1; i++)
					node = node;
				
			}
	}
	//make size method
}
