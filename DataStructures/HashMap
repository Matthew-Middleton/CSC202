/***************************************\
 * Purpose: Create and manage a hash map
 ***************************************/
package dataStructures;

public class HashMap<K,D>
{
	@SuppressWarnings("hiding")
	protected class Hash<K,D>
	{
		protected K key;
		protected D data;
		protected Hash<K,D> next = null;
		
		public Hash(K key, D data)
		{
			this.key = key;
			this.data = data;
		}
		
		public K getKey()
		{
			return key;
		}
		
		public D getData()
		{
			return data;
		}
	}
	private int size = 20;
	@SuppressWarnings("unused")
	private K key;
	@SuppressWarnings("unused")
	private D data;
	private Hash<K,D>[] table;
	
	@SuppressWarnings("unchecked")
	public HashMap()
	{
		key = null;
		data = null;
		table = (Hash[]) new Object[size];
	}
	
	@SuppressWarnings("unchecked")
	public HashMap(int size)
	{
		this.size = size;
		table = (Hash[]) new Object[size];
	}
	/**Creates a hash
	 * @param key
	 * @param data
	 */
	public void put(K key, D data)
	{
		int index = hashCodeNew(key);
		Hash<K,D> hash = new Hash<K,D>(key, data);
		if(table[index]==null)
			table[index] = hash;
		else
		{
			Hash<K,D> current = table[index];
		}
		
	}
	/**Sets the index value for the hash
	 * @param key
	 * @return
	 */
	//need to adjust for base size of table[]
	private int hashCodeNew(K key)
	{
		char k = (char) key;
		k ^= (k>>>20)^(k>>>12);
		int hashCode = k^(k>>>7)^(k>>>4);
		return hashCode % size;
	}
}
