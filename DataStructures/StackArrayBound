/**************************************************\
 * Purpose: Create and manage a bounded array stack
 **************************************************/
package dataStructure;

public class StackArrayBound<T>
{
	protected final int max = 100;
	protected int top = -1;
	protected T[] elements;
	
	@SuppressWarnings("unchecked")
	public StackArrayBound()
	{
		elements = (T[]) new Object[max];
	}
	
	@SuppressWarnings("unchecked")
	public StackArrayBound(int maxsize)
	{
		elements = (T[]) new Object[maxsize];
	}
	/**Checks if the stack is empty
	 * @return
	 */
	public boolean isEmpty()
	{
		return top==0;
	}
	/**Checks if the stack is full
	 * @return
	 */
	public boolean isFull()
	{
		return top==elements.length-1;
	}
	/**Adds the element to the top of the stack
	 * @param element
	 */
	public void push(T element)
	{
		if(isFull())
		{
			System.out.println("STACK OVERFLOW");
		}
		else
		{
			top++;
			elements[top] = element;
		}
	}
	/**Removes the element at the top of the stack
	 */
	public void pop()
	{
		if(isEmpty())
			System.out.println("STACK UNDERFLOW");
		else
		{
			elements[top] = null;
			top--;
		}
	}
	/**Returns the element at the top of the stack
	 * @return
	 */
	public T peek()
	{
		T stackTop = null;
		if(isEmpty())
			System.out.println("STACK UNDERFLOW");
		else
			stackTop = elements[top];
		return stackTop;
	}
}

