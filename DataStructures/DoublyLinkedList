/****************************************************\
 * Purpose: To create and manage a doubly linked list
 ****************************************************/
package dataStructure;

public class DoublyLinkedList<T>
{
	private DoublyLinkedList<T> head = null;
	private DoublyLinkedList<T> prev, next;
	private T data;
	
	public DoublyLinkedList()
	{
		prev = null;
		next = null;
		data = null;
	}
	
	public DoublyLinkedList(T element)
	{
		prev = null;
		next = null;
		this.data = element;
	}
	/**Prints the linked list
	 */
	public void print()
	{
		DoublyLinkedList<T> n = head;
		while(n!=null)
		{
			System.out.print(n.data + " ");
			n = n.next;
		}
	}
	/**Adds the given element to the end of the linked list
	 * @param element
	 */
	public void add(T element)
	{
		DoublyLinkedList<T> n = new DoublyLinkedList<T>(element);
		n.prev = null;
		n.next = null;
		if(head==null)
		{
			head = n;
			return;
		}
		DoublyLinkedList<T> last = head;
		while(last.next!=null)
			last = last.next;
		n.prev = last;
		last.next = n;
		return;
	}
	/**Adds the given element at the given position
	 * @param element
	 * @param i
	 * @return
	 */
	public boolean add(T element, int i)
	{
		if(i>=length()||i<0)
			return false;
		DoublyLinkedList<T> n = head;
		DoublyLinkedList<T> l = new DoublyLinkedList<T>(element);
		int x = 0;
		while(n!=null&&x<i)
		{
			n = n.next;
			x++;
			if(x==i)
			{			
				l.prev = n;
				l.next = n.next;
				n.next = l;
			}
		}
		return false;
	}
	/**Removes the head element of the list; the next element becomes the new head
	 * @return
	 */
	public T remove()
	{
		T item = head.data;
		head = head.next;
		return item;
	}
	/**Returns the head element
	 * @return
	 */
	public T getHead()
	{
		return head.data;
	}
	/**Returns the tail element
	 * @return
	 */
	public T getTail()
	{
		DoublyLinkedList<T> n = head;
		int x = 0;
		while(n!=null&&x<length()-1)
		{
			n = n.next;
			x++;
		}
		return n.data;
	}
	/**Returns the length of the linked list
	 * @return
	 */
	public int length()
	{
		DoublyLinkedList<T> n = head;
		int x = 0;
		while(n!=null)
		{
			n = n.next;
			x++;
		}
		return x;
	}
}
