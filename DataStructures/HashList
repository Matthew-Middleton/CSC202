/*******************************************************\
 * Purpose: Create and manage a hash using a linked list
 *******************************************************/
package dataStructure;

public class HashList<K,D>
{
	private HashList<K,D> top = null;
	private HashList<K,D> next;
	@SuppressWarnings("unused")
	private K key;
	private D data;
	
	public HashList()
	{
		key = null;
		data = null;
	}
	
	public HashList(K key, D data)
	{
		this.key = key;
		this.data = data;
	}
	/**Creates a hash using a linked list
	 * @param key
	 * @param data
	 */
	public void set(K key, D data)
	{
		HashList<K,D> hash = new HashList<K,D>(key,data);
		if(top==null)
		{
			top = hash;
			return;
		}
		hash.next = null;
		HashList<K,D> last = top;
		while(last.next!=null)
			last = last.next;
		last.next = hash;
	}
	/**Returns the data associated with the given key
	 * @param key
	 * @return
	 */
	public D get(K key)
	{
		HashList<K,D> hash = top;
		D item = null;
		while(hash!=null)
		{
			hash = hash.next;
			item = hash.data;
		}
		return item;
	}
	/**Replaces the key associated with the data provided with the given key
	 * @param key
	 * @param data
	 * @return
	 */
	public boolean replaceKey(K key, D data)
	{
		HashList<K,D> hash = top;
		while(hash!=null)
		{
			hash = hash.next;
			if(hash.data==data)
			{
				hash.key = key;
				return true;
			}
			else
				return false;
		}
		return false;
	}
}
