/***************************************\
 * Purpose: Create and manage a hash map
 ***************************************/
package dataStructure;
import java.util.Iterator;

public class HashMap<K,D>
{
	protected final int size = 1000;
	protected final double defLoad = .75;
	protected double load;
	protected int currCap;
	protected int numPairs = 0; //pairs in the map
	private Map<K,D>[] map;
	
	@SuppressWarnings("unchecked")
	public HashMap()
	{
		map = new Map[size];
		currCap = size;
		load = defLoad;
	}
	
	@SuppressWarnings("unchecked")
	public HashMap(int size)
	{
		map = new Map[size];
		load = defLoad;
	}
	
	@SuppressWarnings("unchecked")
	public HashMap(int size, double load)
	{
		map = new Map[size];
		currCap = size;
		this.load = load;
	}
	/**Enlarges the array if the load factor is too great
	 */
	@SuppressWarnings("unchecked")
	private void enlarge()
	{
		Iterator<Map<K,D>> i = iterator();
		int count = numPairs;
		map = new Map[currCap+size];
		currCap += size;
		numPairs = 0;
		Map<K,D> entry = null;
		for(int n=1; n<=count; n++)
		{
			entry = i.next();
			this.put(entry.getKey(), entry.getData());
		}
	}
	/**Creates a hash
	 * @param key
	 * @param data
	 */
	public D put(K key, D data)
	{
		if(key==null)
			throw new IllegalArgumentException("Null keys not allowed");
		Map<K,D> entry = new Map<K,D>(key, data);
		int bucket = bucketNum(hashCode(key));
		while(map[bucket]!=null&&!(map[bucket].getKey().equals(key)))
			bucket = (bucket+1)%currCap;
		if(map[bucket]==null)
		{
			map[bucket] = entry;
			numPairs++;
			//calls enlarge if the load factor is greater than the default load
			if((float)numPairs/currCap>load)
				enlarge();
			return null;
		}
		else
			
		{
			D temp = (D)map[bucket].getData();
			map[bucket] = entry;
			return temp;
		}
	}
	/**Returns the data associated with the given key
	 * @param key
	 * @return
	 */
	public D get(K key)
	{
		if(key==null)
			throw new IllegalArgumentException("Null keys not allowed");
		int bucket = bucketNum(hashCode(key));
		while(map[bucket]!=null&&!map[bucket].getKey().equals(key))
			bucket = (bucket+1)%currCap;
		if(map[bucket]==null)
			return null;
		else
			return map[bucket].getData();
	}
	
	public boolean contains(K key)
	{
		if(key==null)
			throw new IllegalArgumentException("Null keys not allowed.");
		int bucket = bucketNum(hashCode(key));
		while(map[bucket]!=null)
			if(map[bucket].getKey().equals(key))
				return true;
			else
				bucket = (bucket+1)%currCap;
		return false;
	}
	/**Sets the index value for the hash map
	 * @param key
	 * @return
	 */
	private int hashCode(K key)
	{
		// This function ensures that hashCodes that differ only by
	    // constant multiples at each bit position have a bounded
	    // number of collisions.
		char k = (char) key;
		k ^= (k>>>20)^(k>>>12);
		int hashCode = k^(k>>>7)^(k>>>4);
		return hashCode % currCap;
	}
	/**Makes sure the bucket number falls within the size of the hash map based on the value of hash
	 * @param hash
	 * @return
	 */
	private int bucketNum(int hash)
	{
		return hash&(currCap-1);
	}
	/**Checks whether there are any elements in the map[]
	 * @return
	 */
	public boolean isEmpty()
	{
		return numPairs==0;
	}
	/**Returns the number of entries
	 * @return
	 */
	public int size()
	{
		return numPairs;
	}
	/**Creates an iterator for the hash map
	 */
	private class MapIterator implements Iterator<Map<K,D>>
	{
		int listSize = size();
		@SuppressWarnings("unchecked")
		private Map<K,D>[] list = (Map<K,D>[]) new Object[listSize];
		private int prev = -1;
		
		public MapIterator()
		{
			int next = -1;
			for(int i=0; i<listSize; i++)
			{
				next++;
				while(map[next]==null)
					next++;
				list[i] = map[next];
			}
		}
		/**Checks if there is another element
		 */
		public boolean hasNext()
		{
			return prev<listSize-1;
		}
		/**Returns the next element in the list
		 */
		public Map<K,D> next()
		{
			if(!hasNext())
				throw new IndexOutOfBoundsException("Illegal next() call.");
			prev++;
			return list[prev];
		}
		/**Remove is not a supported operation.
		 * 	throws UnsupportedOperationException()
		 */
		public void remove()
		{
			throw new UnsupportedOperationException("remove() is not supported.");
		}
	}
	/**Returns an iterator for the hash map
	 * @return
	 */
	public Iterator<Map<K,D>> iterator()
	{
		return new MapIterator();
	}
}
