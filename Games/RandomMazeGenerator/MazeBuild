/*************************************************************************************\
 * Creates a pseudo-random maze.
 * Algorithm: Instantiate a maze[][], choose a random spot on the left and right side
 * of the maze to start indicate start and stop points. Begins by taking the initial start
 * position and running through the maze until there are no more paths left to be made.
 */
package maze;
import java.util.Random;

public class MazeBuild
{
	private int begin, end, length, width;
	private int maze[][] = null;
	private static Random rand = new Random();
	
	public MazeBuild()
	{
		this.length = 25;
		this.width = 60;
	}
	public MazeBuild(int y)
	{
		this.length = y;
		int n = rand.nextInt(5)+1;
		this.width = y*n;
	}
	public MazeBuild(int y, int x)
	{
		this.length = y;
		this.width = x;
	}
	/*Creates a maze using an array chooses a random position
	 * on the left and right side of the array and sets that
	 * as the starting point
	 */
	public int[][] createMaze()
	{
		maze = new int[length][width];
		for(int i=0; i<length; i++)
			for(int j=0; j<width; j++)
				maze[i][j] = 1;
		begin = rand.nextInt(length-2)+1;
		end = rand.nextInt(length-2)+1;
		maze[begin][1] = maze[begin][0] = 0;
		maze[end][width-2] = maze[end][width-1] = 0;
		createRandPaths(begin,1);
		return maze;
	}
	/*Determines the direction for the path to go in
	 */
	private int[] arrayDir()
	{//something within this method causes an outOfBoundsException: -1
		int array[] = new int[4];//4 is the cardinal directions
		int x = 1;
		for(int i=0; i<array.length; i++)
			array[i] = x++;
		return array;
	}
	/*Determines if the position in the maze is a border
	 * Returns 1 if yes
	 * Returns 0 if no
	 */
	public int isBorder(int i, int j)
	{
		if((maze[i][j]==maze[i][0])||(maze[i][j]==maze[i][width-1])||(maze[i][j]==maze[0][j])
				||(maze[i][j]==maze[length-1][j]))
			return 1;//true
		else
			return 0;//false
	}
	/*Determines if the position is a wall
	 * Returns 1 if yes
	 * Returns 0 if no
	 */
	public int isWall(int i, int j)
	{
		if(maze[i][j]==1)
			return 1;//true
		else
			return 0;//false
	}
	/*Determines if the position is a path
	 * Returns 1 if yes
	 * Returns 0 if no
	 */
	public int isPath(int i, int j)
	{
		if(maze[i][j]==0)
			return 1;//true
		else
			return 0;//false
	}
	/*Creates a guaranteed path through the maze
	 */
	@SuppressWarnings("unused")
	private void createGuaranteedPath()
	{//first three loops set initial correct path
		for(int i=1; i<length; i++)
			for(int j=1; j<width/2; j++)
				maze[begin][j] = 0;
		for(int i=1; i<length; i++)
			for(int j=width/2; j<width; j++)
				maze[end][j-1] = 0;
		for(int i=1; i<length-1; i++)
			for(int j=width/2-1; j<width/2; j++)
				maze[i][j] = 0;
	}
	/*Creates random paths throughout the maze
	 * 	Specifics: Take the starting array values. "Randomly" choose a direction
	 *	to go in and take two steps if there is not a path already there. You must take two steps
	 *	otherwise there will be overlap causing the array to fill with zeros except on the border.
	 */
	private void createRandPaths(int y, int x)
	{
		int direction[] = arrayDir();
		for(int i=0; i<direction.length; i++)
		{
			switch(direction[i])
			{
			case 1://north
				if(y-2<=0)
					continue;
				if(maze[y-2][x]!=0)
				{
					maze[y-1][x] = 0;
					maze[y-2][x] = 0;
					createRandPaths(y-2,x);
				}
				break;
			case 2://south
				if(y+2>=length-1)
					continue;
				if(maze[y+2][x]!=0)
				{
					maze[y+1][x] = 0;
					maze[y+2][x] = 0;
					createRandPaths(y+2,x);
				}
				break;
			case 3://east
				if(x+2>=width-1)
					continue;
				if(maze[y][x+2]!=0)
				{
					maze[y][x+1] = 0;
					maze[y][x+2] = 0;
					createRandPaths(y,x+2);
				}
				break;
			case 4://west
				if(x-2<=0)
					continue;
				if(maze[y][x-2]!=0)
				{
					maze[y][x-1] = 0;
					maze[y][x-2] = 0;
					createRandPaths(y,x-2);
				}
				break;
			}
		}
	}
	/*Returns maze length
	 */
	public int getLength()
	{
		return length;
	}
	/*Returns maze width
	 */
	public int getWidth()
	{
		return width;
	}
	/*Returns the maze
	 */
	public int[][] getMaze()
	{
		return createMaze();
	}
	/*Returns the direction that the path will go in
	 * 	cardinal directions
	 */
	public int[] getDirection()
	{
		return arrayDir();
	}
	/*Returns the beginning x-component of the maze
	 */
	public int getBegin()
	{
		return begin;
	}
	/*Returns the ending x-component of the maze
	 */
	public int getEnd()
	{
		return end;
	}
}
